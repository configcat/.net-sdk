name: .NET SDK CI
on:
  schedule:
    - cron: '0 0 * * *'
  push:
    branches: [ master ]
    tags: [ 'v[0-9]+.[0-9]+.[0-9]+' ]
  pull_request:
    branches: [ master ]
  workflow_dispatch:

env:
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
  DOTNET_CLI_TELEMETRY_OPTOUT: true

jobs:
  build-and-test-netfw:
    strategy:
      matrix:
        dotnet-version: [
          {rt: "4.5", tfm: net45},
          {rt: "4.6.1", tfm: net461},
        ]
    name: Build & test on .NET ${{ matrix.dotnet-version.rt }}
    runs-on: windows-2022
    steps:
      - uses: actions/checkout@v5
      - uses: actions/setup-dotnet@v5
        with:
          dotnet-version: |
            8.0.x
      - name: Build
        run: |
          dotnet build src/ConfigCat.Client.Tests/ConfigCat.Client.Tests.csproj -c Release -f ${{ matrix.dotnet-version.tfm }}
      - name: Test
        run: |
          dotnet test src/ConfigCat.Client.Tests/ConfigCat.Client.Tests.csproj -c Release -f ${{ matrix.dotnet-version.tfm }} --no-build

  build-and-test-netcore:
    strategy:
      matrix:
        dotnet-version: [
          {rt: "3.1.x", sdk: "3.1.100", tfm: netcoreapp3.1},
          {rt: "6.0.x", sdk: "6.0.100", tfm: net6.0},
          {rt: "8.0.x", sdk: "8.0.100", tfm: net8.0},
          {rt: "9.0.x", sdk: "9.0.100", tfm: net9.0}
        ]
        os: [ubuntu-latest, windows-latest, macOS-latest]
        exclude:
          - dotnet-version: {rt: "3.1.x", sdk: "3.1.100", tfm: netcoreapp3.1}
            os: ubuntu-latest
          - dotnet-version: {rt: "3.1.x", sdk: "3.1.100", tfm: netcoreapp3.1}
            os: macOS-latest
    name: Build & test on .NET ${{ matrix.dotnet-version.rt }} (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v5
      - uses: actions/setup-dotnet@v5
        with:
          dotnet-version: |
            ${{ matrix.dotnet-version.rt }}
            9.0.x
      - name: Build
        run: |
          dotnet build src/ConfigCat.Client.Tests/ConfigCat.Client.Tests.csproj -c Release -f ${{ matrix.dotnet-version.tfm }}
      - name: Pin dotnet SDK version
        run: |
          dotnet new global.json --sdk-version ${{ matrix.dotnet-version.sdk }} --roll-forward latestFeature
      - name: Test
        run: |
          dotnet test src/ConfigCat.Client.Tests/ConfigCat.Client.Tests.csproj -c Release -f ${{ matrix.dotnet-version.tfm }} --no-build

  publish:
    needs: [
      build-and-test-netfw,
      build-and-test-netcore
    ]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags')
    steps:
    - uses: actions/checkout@v4
    
    - uses: actions/setup-dotnet@v4

    - name: Install InheritDocTool
      run: |
        dotnet tool install -g InheritDocTool

    - name: Determine version
      run: |
        arrTag=(${GITHUB_REF//\// })
        VERSION="${arrTag[2]}"
        VERSION="${VERSION//v}"
        echo "VERSION=$VERSION" >> $GITHUB_ENV

    # See also: https://andrewlock.net/version-vs-versionsuffix-vs-packageversion-what-do-they-all-mean/
    - name: Build
      run: |
        dotnet build src/ConfigCatClient.sln -c Release /p:ContinuousIntegrationBuild=true /p:Version=$VERSION

    - name: Run InheritDocTool
      run: |
        inheritdoc -o

    - name: Pack
      run: |
        dotnet pack src/ConfigCatClient/ConfigCatClient.csproj -c Release --no-build /p:PackageOutputPath=../../artifacts /p:Version=$VERSION

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: packages
        path: artifacts

    # Symbol packages are auto-pushed, see: https://learn.microsoft.com/en-us/nuget/create-packages/symbol-packages-snupkg#publishing-a-symbol-package
    # - name: Push to NuGet
    #   run: dotnet nuget push artifacts/*.nupkg --api-key ${{ secrets.NUGET_API_KEY }} --source https://api.nuget.org/v3/index.json
