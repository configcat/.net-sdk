INFO [5000] Evaluating 'dependentFeature' for User '{"Identifier":"12345","Email":"kate@configcat.com","Country":"USA"}'
  Evaluating targeting rules and applying the first match if any:
  - IF Flag 'mainFeature' EQUALS 'target'
    (
      Evaluating prerequisite flag 'mainFeature':
      Evaluating targeting rules and applying the first match if any:
      - IF User.Email ENDS WITH ANY OF [<1 hashed value>] => false, skipping the remaining AND conditions
        THEN 'private' => no match
      - IF User.Country IS ONE OF [<1 hashed value>] => true
        AND User IS NOT IN SEGMENT 'Beta Users'
        (
          Evaluating segment 'Beta Users':
          - IF User.Email IS ONE OF [<2 hashed values>] => false, skipping the remaining AND conditions
          Segment evaluation result: User IS NOT IN SEGMENT.
          Condition (User IS NOT IN SEGMENT 'Beta Users') evaluates to true.
        ) => true
        AND User IS NOT IN SEGMENT 'Developers'
        (
          Evaluating segment 'Developers':
          - IF User.Email IS ONE OF [<2 hashed values>] => false, skipping the remaining AND conditions
          Segment evaluation result: User IS NOT IN SEGMENT.
          Condition (User IS NOT IN SEGMENT 'Developers') evaluates to true.
        ) => true
        THEN 'target' => MATCH, applying rule
      Prerequisite flag evaluation result: 'target'.
      Condition (Flag 'mainFeature' EQUALS 'target') evaluates to true.
    )
    THEN % options => MATCH, applying rule
    Evaluating % options based on the User.Identifier attribute:
    - Computing hash in the [0..99] range from User.Identifier => 78 (this value is sticky and consistent across all SDKs)
    - Hash value 78 selects % option 4 (25%), 'Horse'.
  Returning 'Horse'.
